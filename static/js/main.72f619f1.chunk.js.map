{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getLocation","navigator","geolocation","getCurrentPosition","updatePosition","handleDecline","handleNoGeo","position","setState","lat","coords","latitude","long","longitude","getResponse","error","locationText","state","_this2","fetch","then","response","json","console","log","headerFullLocation","catch","window","location","href","_this3","react_default","a","createElement","className","id","onClick","handleEnter","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"yNAsEeA,qBAlEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYVQ,YAAc,WACTC,UAAUC,YACXD,UAAUC,YAAYC,mBAAmBV,EAAKW,eAAgBX,EAAKY,eAEnEZ,EAAKa,eAjBYb,EAqBrBW,eAAiB,SAACG,GAChBd,EAAKe,SAAS,CACZC,IAAKF,EAASG,OAAOC,SACrBC,KAAML,EAASG,OAAOG,YAExBpB,EAAKqB,eA1BcrB,EA6BrBY,cAAgB,SAACU,GACftB,EAAKe,SAAS,CAACQ,aAAc,6DA9BVvB,EA+CrBa,YAAc,WACZb,EAAKe,SAAS,CAACQ,aAAc,2EA9C3BvB,EAAKwB,MAAQ,CACXD,aAAc,GACdP,IAAK,KACLG,KAAM,MALSnB,mFAUnBG,KAAKI,oDAuBO,IAAAkB,EAAAtB,KACZuB,MAAM,gMAAgMvB,KAAKqB,MAAMR,IAAI,IAAIb,KAAKqB,MAAML,KAAK,iBACxOQ,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBF,KAAK,SAACC,GACLE,QAAQC,IAAIH,EAASA,SAASI,oBAC9BP,EAAKV,SAAS,CAACQ,aAAc,cAAgBK,EAASA,SAASI,uBAEhEC,MAAM,SAASX,GACdQ,QAAQC,IAAIT,2CASdY,OAAOC,SAASC,KAAK,oNAGZ,IAAAC,EAAAlC,KACP,OACEmC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,uCADF,MAEKF,EAAAC,EAAAC,cAAA,KAAGE,GAAG,YAAYvC,KAAKqB,MAAMD,cAChCe,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAKN,EAAKO,gBAA3B,iBA7DUC,cCSEC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB7C,WACrBA,UAAU8C,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.72f619f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      locationText: '',\n      lat: null,\n      long: null,\n    }\n  }\n\ncomponentDidMount() {\n  this.getLocation();\n}\n\ngetLocation = ()=> {\n  if(navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(this.updatePosition, this.handleDecline);\n  } else {\n    this.handleNoGeo();\n  }\n}\n\nupdatePosition = (position)=> {\n  this.setState({\n    lat: position.coords.latitude,\n    long: position.coords.longitude\n  })\n  this.getResponse();\n}\n\nhandleDecline = (error)=> {\n  this.setState({locationText: 'We couldn\\'t find your location. Please enter city name.'})\n}\n\ngetResponse() {\n  fetch('https://api.foursquare.com/v2/venues/explore?client_id=FKCFZTAEROJJDMGZSLU15CJ4ACT0PO2CNRPIROXIDRS10Q3X&client_secret=2MJEL0S4I31QEIRXBIHFHX5ILUCBFUSIADVZ0C4LJ0YEG3LK&v=20180323&limit=1&ll='+this.state.lat+','+this.state.long+'&query=coffee')\n  .then((response)=> {\n    return(response.json());\n  })\n  .then((response)=> {\n    console.log(response.response.headerFullLocation)\n    this.setState({locationText: 'Welcome to ' + response.response.headerFullLocation})\n  })\n  .catch(function(error) {\n    console.log(error)\n  });\n}\n\nhandleNoGeo = ()=> {\n  this.setState({locationText: 'Geolocation is not supported by this browser, please enter city name.'})\n}\n\nhandleEnter() {\n  window.location.href='https://foursquare.com/oauth2/authenticate?client_id=FKCFZTAEROJJDMGZSLU15CJ4ACT0PO2CNRPIROXIDRS10Q3X&response_type=token&redirect_uri=https://devinmarieb.github.io/foursquare/'\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Foursquare Code Challenge</h1>\n        // <p id=\"location\">{this.state.locationText}</p>\n        <button onClick={()=> this.handleEnter()}>Enter</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}