{"version":3,"sources":["Dropdown.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","getOptions","props","_this","options","map","option","i","react_default","a","createElement","key","Date","now","Math","random","value","text","_this$props","this","userSelect","getUserSelection","className","onChange","event","target","Component","Results","data","venue","name","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getLocation","navigator","geolocation","getCurrentPosition","updatePosition","handleDecline","handleNoGeo","position","setState","lat","coords","latitude","long","longitude","getResponse","error","locationText","updateUserType","section","updateUserRadius","radius","console","log","state","updateValue","inputValue","_this2","fetch","then","response","json","headerFullLocation","groups","items","catch","_this3","_this4","_this$state","src_Dropdown","bind","type","onClick","updateResponse","src_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f735845.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Dropdown extends Component {\n  getOptions=(props)=> {\n    return (\n      this.props.options.map((option, i) => {\n        return (<option key={ Date.now() * Math.random() } value={option.value}>{option.text}</option>)\n      })\n    )\n  }\n\n  render() {\n    const {userSelect, getUserSelection} = this.props\n    return (\n      <div className='dropdown'>\n        <select className='dropdown-menu' value={userSelect} onChange={(event)=> getUserSelection(event.target.value)}>\n          {this.getOptions()}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default Dropdown;\n","import React, { Component } from 'react';\n\nclass Results extends Component {\n  getOptions=(props)=> {\n    if(this.props.data) {\n      return (\n        this.props.data.map((option, i) => {\n          return (<li className='list-item' key={ Date.now() * Math.random() }>{option.venue.name}</li>)\n        })\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className='results'>\n        <ul className='list'>\n          {this.getOptions()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import React, { Component } from 'react'\nimport './App.css'\nimport Dropdown from './Dropdown.js'\nimport Results from './Results.js'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      locationText: 'Finding your location...',\n      data: '',\n      lat: '',\n      long: '',\n      section: 'food',\n      radius: 1000,\n      inputValue: ''\n    }\n  }\n\n  componentDidMount() {\n    this.getLocation()\n  }\n\n  getLocation=()=> {\n    if(navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.updatePosition, this.handleDecline)\n    } else {\n      this.handleNoGeo()\n    }\n  }\n\n  updatePosition=(position)=> {\n    this.setState({\n      lat: position.coords.latitude,\n      long: position.coords.longitude\n    })\n    this.getResponse()\n  }\n\n  handleDecline=(error)=> {\n    this.setState({locationText: 'We couldn\\'t find your location. Please enter city name.'})\n  }\n\n  getResponse() {\n    fetch('https://api.foursquare.com/v2/venues/explore?client_id=Z2LMK4D5LJHTVCMEO2G0OGOLBLSUMSV1BQNPLK45XP4TT0JV&client_secret=NHOLAPTGQ2S1GDWBMZDWVYIATTWUBJGMPE4TPMBTEJCJWR23&v=20180323&limit=10&ll='+this.state.lat+','+this.state.long+'&intent=browse&radius='+ this.state.radius +'&section='+this.state.section)\n    .then((response)=> {\n      return(response.json());\n    })\n    .then((response)=> {\n      this.setState({\n        locationText: 'Welcome to ' + response.response.headerFullLocation,\n        data: response.response.groups[0].items\n      })\n    })\n    .catch(function(error) {\n      console.log(error)\n    });\n  }\n\n  updateResponse() {\n    fetch('https://api.foursquare.com/v2/venues/explore?client_id=Z2LMK4D5LJHTVCMEO2G0OGOLBLSUMSV1BQNPLK45XP4TT0JV&client_secret=NHOLAPTGQ2S1GDWBMZDWVYIATTWUBJGMPE4TPMBTEJCJWR23&v=20180323&limit=10&near='+this.state.inputValue+'&intent=browse&radius='+ this.state.radius +'&section='+this.state.section)\n    .then((response)=> {\n      return(response.json());\n    })\n    .then((response)=> {\n      this.setState({\n        locationText: 'Welcome to ' + response.response.headerFullLocation,\n        data: response.response.groups[0].items\n      })\n    })\n    .catch(function(error) {\n      console.log(error)\n    });\n  }\n\n  handleNoGeo=()=> {\n    this.setState({locationText: 'Geolocation is not supported by this browser, please enter city name.'})\n  }\n\n  updateUserType=(event)=> {\n    this.setState({section: event})\n  }\n\n  updateUserRadius=(event)=> {\n    this.setState({radius: event})\n    console.log(this.state.radius)\n  }\n\n  updateValue=(event)=> {\n    this.setState({inputValue: event.target.value})\n  }\n\n\n  render() {\n    const { locationText, inputValue, data } = this.state\n    return (\n      <div className='app'>\n        <div className='container'>\n          <h1 className='title'>{locationText}</h1>\n          <p className='subtitle'>Search your location or choose another city:</p>\n          <input className='input' value={inputValue} onChange={this.updateValue}/>\n          <div className='dropdown-container'>\n            <p className='dropdown-category'>Category:</p>\n            <Dropdown\n              userSelect={this.state.section}\n              getUserSelection={this.updateUserType.bind(this)}\n              options={[{text: 'Food', value: 'food'}, {text: 'Drinks', value: 'drinks'}, {text: 'Coffee', value: 'coffee'}, {text: 'Shops', value: 'shops'}, {text: 'Arts', value: 'arts'}, {text: 'Outdoors', value: 'outdoors'}, {text: 'Sights', value: 'sights'}, {text: 'Trending', value: 'trending'}, {text: 'Top Picks', value: 'topPicks'}]}\n            />\n            <p className='dropdown-category'>Distance:</p>\n            <Dropdown\n              userSelect={this.state.radius}\n              getUserSelection={this.updateUserRadius.bind(this)}\n              options={[{text: '1,000m', value: 1000}, {text: '5,000m', value: 5000}, {text: '10,000m', value: 10000}]}\n            />\n            <input className='button' type='button' value='Search' onClick={()=> this.updateResponse()}/>\n          </div>\n          <Results data={data}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}